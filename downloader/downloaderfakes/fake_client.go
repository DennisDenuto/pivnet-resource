// This file was generated by counterfeiter
package downloaderfakes

import (
	"os"
	"sync"
)

type FakeClient struct {
	DownloadProductFileStub        func(writer *os.File, productSlug string, releaseID int, productFileID int) error
	downloadProductFileMutex       sync.RWMutex
	downloadProductFileArgsForCall []struct {
		writer        *os.File
		productSlug   string
		releaseID     int
		productFileID int
	}
	downloadProductFileReturns struct {
		result1 error
	}
}

func (fake *FakeClient) DownloadProductFile(writer *os.File, productSlug string, releaseID int, productFileID int) error {
	fake.downloadProductFileMutex.Lock()
	fake.downloadProductFileArgsForCall = append(fake.downloadProductFileArgsForCall, struct {
		writer        *os.File
		productSlug   string
		releaseID     int
		productFileID int
	}{writer, productSlug, releaseID, productFileID})
	fake.downloadProductFileMutex.Unlock()
	if fake.DownloadProductFileStub != nil {
		return fake.DownloadProductFileStub(writer, productSlug, releaseID, productFileID)
	} else {
		return fake.downloadProductFileReturns.result1
	}
}

func (fake *FakeClient) DownloadProductFileCallCount() int {
	fake.downloadProductFileMutex.RLock()
	defer fake.downloadProductFileMutex.RUnlock()
	return len(fake.downloadProductFileArgsForCall)
}

func (fake *FakeClient) DownloadProductFileArgsForCall(i int) (*os.File, string, int, int) {
	fake.downloadProductFileMutex.RLock()
	defer fake.downloadProductFileMutex.RUnlock()
	return fake.downloadProductFileArgsForCall[i].writer, fake.downloadProductFileArgsForCall[i].productSlug, fake.downloadProductFileArgsForCall[i].releaseID, fake.downloadProductFileArgsForCall[i].productFileID
}

func (fake *FakeClient) DownloadProductFileReturns(result1 error) {
	fake.DownloadProductFileStub = nil
	fake.downloadProductFileReturns = struct {
		result1 error
	}{result1}
}
