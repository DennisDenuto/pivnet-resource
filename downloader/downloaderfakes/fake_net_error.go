// This file was generated by counterfeiter
package downloaderfakes

import "sync"

type FakeNetError struct {
	ErrorStub        func() string
	errorMutex       sync.RWMutex
	errorArgsForCall []struct{}
	errorReturns     struct {
		result1 string
	}
	TimeoutStub        func() bool
	timeoutMutex       sync.RWMutex
	timeoutArgsForCall []struct{}
	timeoutReturns     struct {
		result1 bool
	}
	TemporaryStub        func() bool
	temporaryMutex       sync.RWMutex
	temporaryArgsForCall []struct{}
	temporaryReturns     struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNetError) Error() string {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct{}{})
	fake.recordInvocation("Error", []interface{}{})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		return fake.ErrorStub()
	} else {
		return fake.errorReturns.result1
	}
}

func (fake *FakeNetError) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *FakeNetError) ErrorReturns(result1 string) {
	fake.ErrorStub = nil
	fake.errorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeNetError) Timeout() bool {
	fake.timeoutMutex.Lock()
	fake.timeoutArgsForCall = append(fake.timeoutArgsForCall, struct{}{})
	fake.recordInvocation("Timeout", []interface{}{})
	fake.timeoutMutex.Unlock()
	if fake.TimeoutStub != nil {
		return fake.TimeoutStub()
	} else {
		return fake.timeoutReturns.result1
	}
}

func (fake *FakeNetError) TimeoutCallCount() int {
	fake.timeoutMutex.RLock()
	defer fake.timeoutMutex.RUnlock()
	return len(fake.timeoutArgsForCall)
}

func (fake *FakeNetError) TimeoutReturns(result1 bool) {
	fake.TimeoutStub = nil
	fake.timeoutReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeNetError) Temporary() bool {
	fake.temporaryMutex.Lock()
	fake.temporaryArgsForCall = append(fake.temporaryArgsForCall, struct{}{})
	fake.recordInvocation("Temporary", []interface{}{})
	fake.temporaryMutex.Unlock()
	if fake.TemporaryStub != nil {
		return fake.TemporaryStub()
	} else {
		return fake.temporaryReturns.result1
	}
}

func (fake *FakeNetError) TemporaryCallCount() int {
	fake.temporaryMutex.RLock()
	defer fake.temporaryMutex.RUnlock()
	return len(fake.temporaryArgsForCall)
}

func (fake *FakeNetError) TemporaryReturns(result1 bool) {
	fake.TemporaryStub = nil
	fake.temporaryReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeNetError) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.timeoutMutex.RLock()
	defer fake.timeoutMutex.RUnlock()
	fake.temporaryMutex.RLock()
	defer fake.temporaryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNetError) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
