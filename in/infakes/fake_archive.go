// This file was generated by counterfeiter
package infakes

import "sync"

type FakeArchive struct {
	MimetypeStub        func(filename string) string
	mimetypeMutex       sync.RWMutex
	mimetypeArgsForCall []struct {
		filename string
	}
	mimetypeReturns struct {
		result1 string
	}
	ExtractStub        func(mime, filename string) error
	extractMutex       sync.RWMutex
	extractArgsForCall []struct {
		mime     string
		filename string
	}
	extractReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArchive) Mimetype(filename string) string {
	fake.mimetypeMutex.Lock()
	fake.mimetypeArgsForCall = append(fake.mimetypeArgsForCall, struct {
		filename string
	}{filename})
	fake.recordInvocation("Mimetype", []interface{}{filename})
	fake.mimetypeMutex.Unlock()
	if fake.MimetypeStub != nil {
		return fake.MimetypeStub(filename)
	} else {
		return fake.mimetypeReturns.result1
	}
}

func (fake *FakeArchive) MimetypeCallCount() int {
	fake.mimetypeMutex.RLock()
	defer fake.mimetypeMutex.RUnlock()
	return len(fake.mimetypeArgsForCall)
}

func (fake *FakeArchive) MimetypeArgsForCall(i int) string {
	fake.mimetypeMutex.RLock()
	defer fake.mimetypeMutex.RUnlock()
	return fake.mimetypeArgsForCall[i].filename
}

func (fake *FakeArchive) MimetypeReturns(result1 string) {
	fake.MimetypeStub = nil
	fake.mimetypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeArchive) Extract(mime string, filename string) error {
	fake.extractMutex.Lock()
	fake.extractArgsForCall = append(fake.extractArgsForCall, struct {
		mime     string
		filename string
	}{mime, filename})
	fake.recordInvocation("Extract", []interface{}{mime, filename})
	fake.extractMutex.Unlock()
	if fake.ExtractStub != nil {
		return fake.ExtractStub(mime, filename)
	} else {
		return fake.extractReturns.result1
	}
}

func (fake *FakeArchive) ExtractCallCount() int {
	fake.extractMutex.RLock()
	defer fake.extractMutex.RUnlock()
	return len(fake.extractArgsForCall)
}

func (fake *FakeArchive) ExtractArgsForCall(i int) (string, string) {
	fake.extractMutex.RLock()
	defer fake.extractMutex.RUnlock()
	return fake.extractArgsForCall[i].mime, fake.extractArgsForCall[i].filename
}

func (fake *FakeArchive) ExtractReturns(result1 error) {
	fake.ExtractStub = nil
	fake.extractReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArchive) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mimetypeMutex.RLock()
	defer fake.mimetypeMutex.RUnlock()
	fake.extractMutex.RLock()
	defer fake.extractMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeArchive) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
