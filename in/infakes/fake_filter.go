// This file was generated by counterfeiter
package infakes

import (
	"sync"

	"github.com/pivotal-cf/go-pivnet"
)

type FakeFilter struct {
	DownloadLinksByGlobsStub        func(downloadLinks map[string]string, glob []string, failOnNoMatch bool) (map[string]string, error)
	downloadLinksByGlobsMutex       sync.RWMutex
	downloadLinksByGlobsArgsForCall []struct {
		downloadLinks map[string]string
		glob          []string
		failOnNoMatch bool
	}
	downloadLinksByGlobsReturns struct {
		result1 map[string]string
		result2 error
	}
	DownloadLinksStub        func(p []pivnet.ProductFile) map[string]string
	downloadLinksMutex       sync.RWMutex
	downloadLinksArgsForCall []struct {
		p []pivnet.ProductFile
	}
	downloadLinksReturns struct {
		result1 map[string]string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFilter) DownloadLinksByGlobs(downloadLinks map[string]string, glob []string, failOnNoMatch bool) (map[string]string, error) {
	var globCopy []string
	if glob != nil {
		globCopy = make([]string, len(glob))
		copy(globCopy, glob)
	}
	fake.downloadLinksByGlobsMutex.Lock()
	fake.downloadLinksByGlobsArgsForCall = append(fake.downloadLinksByGlobsArgsForCall, struct {
		downloadLinks map[string]string
		glob          []string
		failOnNoMatch bool
	}{downloadLinks, globCopy, failOnNoMatch})
	fake.recordInvocation("DownloadLinksByGlobs", []interface{}{downloadLinks, globCopy, failOnNoMatch})
	fake.downloadLinksByGlobsMutex.Unlock()
	if fake.DownloadLinksByGlobsStub != nil {
		return fake.DownloadLinksByGlobsStub(downloadLinks, glob, failOnNoMatch)
	} else {
		return fake.downloadLinksByGlobsReturns.result1, fake.downloadLinksByGlobsReturns.result2
	}
}

func (fake *FakeFilter) DownloadLinksByGlobsCallCount() int {
	fake.downloadLinksByGlobsMutex.RLock()
	defer fake.downloadLinksByGlobsMutex.RUnlock()
	return len(fake.downloadLinksByGlobsArgsForCall)
}

func (fake *FakeFilter) DownloadLinksByGlobsArgsForCall(i int) (map[string]string, []string, bool) {
	fake.downloadLinksByGlobsMutex.RLock()
	defer fake.downloadLinksByGlobsMutex.RUnlock()
	return fake.downloadLinksByGlobsArgsForCall[i].downloadLinks, fake.downloadLinksByGlobsArgsForCall[i].glob, fake.downloadLinksByGlobsArgsForCall[i].failOnNoMatch
}

func (fake *FakeFilter) DownloadLinksByGlobsReturns(result1 map[string]string, result2 error) {
	fake.DownloadLinksByGlobsStub = nil
	fake.downloadLinksByGlobsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeFilter) DownloadLinks(p []pivnet.ProductFile) map[string]string {
	var pCopy []pivnet.ProductFile
	if p != nil {
		pCopy = make([]pivnet.ProductFile, len(p))
		copy(pCopy, p)
	}
	fake.downloadLinksMutex.Lock()
	fake.downloadLinksArgsForCall = append(fake.downloadLinksArgsForCall, struct {
		p []pivnet.ProductFile
	}{pCopy})
	fake.recordInvocation("DownloadLinks", []interface{}{pCopy})
	fake.downloadLinksMutex.Unlock()
	if fake.DownloadLinksStub != nil {
		return fake.DownloadLinksStub(p)
	} else {
		return fake.downloadLinksReturns.result1
	}
}

func (fake *FakeFilter) DownloadLinksCallCount() int {
	fake.downloadLinksMutex.RLock()
	defer fake.downloadLinksMutex.RUnlock()
	return len(fake.downloadLinksArgsForCall)
}

func (fake *FakeFilter) DownloadLinksArgsForCall(i int) []pivnet.ProductFile {
	fake.downloadLinksMutex.RLock()
	defer fake.downloadLinksMutex.RUnlock()
	return fake.downloadLinksArgsForCall[i].p
}

func (fake *FakeFilter) DownloadLinksReturns(result1 map[string]string) {
	fake.DownloadLinksStub = nil
	fake.downloadLinksReturns = struct {
		result1 map[string]string
	}{result1}
}

func (fake *FakeFilter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadLinksByGlobsMutex.RLock()
	defer fake.downloadLinksByGlobsMutex.RUnlock()
	fake.downloadLinksMutex.RLock()
	defer fake.downloadLinksMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFilter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
