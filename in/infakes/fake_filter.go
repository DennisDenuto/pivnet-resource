// This file was generated by counterfeiter
package infakes

import (
	"sync"

	go_pivnet "github.com/pivotal-cf/go-pivnet"
)

type FakeFilter struct {
	ProductFileNamesByGlobsStub        func(productFiles []go_pivnet.ProductFile, globs []string) ([]go_pivnet.ProductFile, error)
	productFileNamesByGlobsMutex       sync.RWMutex
	productFileNamesByGlobsArgsForCall []struct {
		productFiles []go_pivnet.ProductFile
		globs        []string
	}
	productFileNamesByGlobsReturns struct {
		result1 []go_pivnet.ProductFile
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFilter) ProductFileNamesByGlobs(productFiles []go_pivnet.ProductFile, globs []string) ([]go_pivnet.ProductFile, error) {
	var productFilesCopy []go_pivnet.ProductFile
	if productFiles != nil {
		productFilesCopy = make([]go_pivnet.ProductFile, len(productFiles))
		copy(productFilesCopy, productFiles)
	}
	var globsCopy []string
	if globs != nil {
		globsCopy = make([]string, len(globs))
		copy(globsCopy, globs)
	}
	fake.productFileNamesByGlobsMutex.Lock()
	fake.productFileNamesByGlobsArgsForCall = append(fake.productFileNamesByGlobsArgsForCall, struct {
		productFiles []go_pivnet.ProductFile
		globs        []string
	}{productFilesCopy, globsCopy})
	fake.recordInvocation("ProductFileNamesByGlobs", []interface{}{productFilesCopy, globsCopy})
	fake.productFileNamesByGlobsMutex.Unlock()
	if fake.ProductFileNamesByGlobsStub != nil {
		return fake.ProductFileNamesByGlobsStub(productFiles, globs)
	} else {
		return fake.productFileNamesByGlobsReturns.result1, fake.productFileNamesByGlobsReturns.result2
	}
}

func (fake *FakeFilter) ProductFileNamesByGlobsCallCount() int {
	fake.productFileNamesByGlobsMutex.RLock()
	defer fake.productFileNamesByGlobsMutex.RUnlock()
	return len(fake.productFileNamesByGlobsArgsForCall)
}

func (fake *FakeFilter) ProductFileNamesByGlobsArgsForCall(i int) ([]go_pivnet.ProductFile, []string) {
	fake.productFileNamesByGlobsMutex.RLock()
	defer fake.productFileNamesByGlobsMutex.RUnlock()
	return fake.productFileNamesByGlobsArgsForCall[i].productFiles, fake.productFileNamesByGlobsArgsForCall[i].globs
}

func (fake *FakeFilter) ProductFileNamesByGlobsReturns(result1 []go_pivnet.ProductFile, result2 error) {
	fake.ProductFileNamesByGlobsStub = nil
	fake.productFileNamesByGlobsReturns = struct {
		result1 []go_pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *FakeFilter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.productFileNamesByGlobsMutex.RLock()
	defer fake.productFileNamesByGlobsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFilter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
