// Code generated by counterfeiter. DO NOT EDIT.
package infakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-resource/metadata"
)

type FakeFileWriter struct {
	WriteMetadataJSONFileStub        func(mdata metadata.Metadata) error
	writeMetadataJSONFileMutex       sync.RWMutex
	writeMetadataJSONFileArgsForCall []struct {
		mdata metadata.Metadata
	}
	writeMetadataJSONFileReturns struct {
		result1 error
	}
	writeMetadataJSONFileReturnsOnCall map[int]struct {
		result1 error
	}
	WriteMetadataYAMLFileStub        func(mdata metadata.Metadata) error
	writeMetadataYAMLFileMutex       sync.RWMutex
	writeMetadataYAMLFileArgsForCall []struct {
		mdata metadata.Metadata
	}
	writeMetadataYAMLFileReturns struct {
		result1 error
	}
	writeMetadataYAMLFileReturnsOnCall map[int]struct {
		result1 error
	}
	WriteVersionFileStub        func(versionWithFingerprint string) error
	writeVersionFileMutex       sync.RWMutex
	writeVersionFileArgsForCall []struct {
		versionWithFingerprint string
	}
	writeVersionFileReturns struct {
		result1 error
	}
	writeVersionFileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileWriter) WriteMetadataJSONFile(mdata metadata.Metadata) error {
	fake.writeMetadataJSONFileMutex.Lock()
	ret, specificReturn := fake.writeMetadataJSONFileReturnsOnCall[len(fake.writeMetadataJSONFileArgsForCall)]
	fake.writeMetadataJSONFileArgsForCall = append(fake.writeMetadataJSONFileArgsForCall, struct {
		mdata metadata.Metadata
	}{mdata})
	fake.recordInvocation("WriteMetadataJSONFile", []interface{}{mdata})
	fake.writeMetadataJSONFileMutex.Unlock()
	if fake.WriteMetadataJSONFileStub != nil {
		return fake.WriteMetadataJSONFileStub(mdata)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeMetadataJSONFileReturns.result1
}

func (fake *FakeFileWriter) WriteMetadataJSONFileCallCount() int {
	fake.writeMetadataJSONFileMutex.RLock()
	defer fake.writeMetadataJSONFileMutex.RUnlock()
	return len(fake.writeMetadataJSONFileArgsForCall)
}

func (fake *FakeFileWriter) WriteMetadataJSONFileArgsForCall(i int) metadata.Metadata {
	fake.writeMetadataJSONFileMutex.RLock()
	defer fake.writeMetadataJSONFileMutex.RUnlock()
	return fake.writeMetadataJSONFileArgsForCall[i].mdata
}

func (fake *FakeFileWriter) WriteMetadataJSONFileReturns(result1 error) {
	fake.WriteMetadataJSONFileStub = nil
	fake.writeMetadataJSONFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileWriter) WriteMetadataJSONFileReturnsOnCall(i int, result1 error) {
	fake.WriteMetadataJSONFileStub = nil
	if fake.writeMetadataJSONFileReturnsOnCall == nil {
		fake.writeMetadataJSONFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeMetadataJSONFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileWriter) WriteMetadataYAMLFile(mdata metadata.Metadata) error {
	fake.writeMetadataYAMLFileMutex.Lock()
	ret, specificReturn := fake.writeMetadataYAMLFileReturnsOnCall[len(fake.writeMetadataYAMLFileArgsForCall)]
	fake.writeMetadataYAMLFileArgsForCall = append(fake.writeMetadataYAMLFileArgsForCall, struct {
		mdata metadata.Metadata
	}{mdata})
	fake.recordInvocation("WriteMetadataYAMLFile", []interface{}{mdata})
	fake.writeMetadataYAMLFileMutex.Unlock()
	if fake.WriteMetadataYAMLFileStub != nil {
		return fake.WriteMetadataYAMLFileStub(mdata)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeMetadataYAMLFileReturns.result1
}

func (fake *FakeFileWriter) WriteMetadataYAMLFileCallCount() int {
	fake.writeMetadataYAMLFileMutex.RLock()
	defer fake.writeMetadataYAMLFileMutex.RUnlock()
	return len(fake.writeMetadataYAMLFileArgsForCall)
}

func (fake *FakeFileWriter) WriteMetadataYAMLFileArgsForCall(i int) metadata.Metadata {
	fake.writeMetadataYAMLFileMutex.RLock()
	defer fake.writeMetadataYAMLFileMutex.RUnlock()
	return fake.writeMetadataYAMLFileArgsForCall[i].mdata
}

func (fake *FakeFileWriter) WriteMetadataYAMLFileReturns(result1 error) {
	fake.WriteMetadataYAMLFileStub = nil
	fake.writeMetadataYAMLFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileWriter) WriteMetadataYAMLFileReturnsOnCall(i int, result1 error) {
	fake.WriteMetadataYAMLFileStub = nil
	if fake.writeMetadataYAMLFileReturnsOnCall == nil {
		fake.writeMetadataYAMLFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeMetadataYAMLFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileWriter) WriteVersionFile(versionWithFingerprint string) error {
	fake.writeVersionFileMutex.Lock()
	ret, specificReturn := fake.writeVersionFileReturnsOnCall[len(fake.writeVersionFileArgsForCall)]
	fake.writeVersionFileArgsForCall = append(fake.writeVersionFileArgsForCall, struct {
		versionWithFingerprint string
	}{versionWithFingerprint})
	fake.recordInvocation("WriteVersionFile", []interface{}{versionWithFingerprint})
	fake.writeVersionFileMutex.Unlock()
	if fake.WriteVersionFileStub != nil {
		return fake.WriteVersionFileStub(versionWithFingerprint)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeVersionFileReturns.result1
}

func (fake *FakeFileWriter) WriteVersionFileCallCount() int {
	fake.writeVersionFileMutex.RLock()
	defer fake.writeVersionFileMutex.RUnlock()
	return len(fake.writeVersionFileArgsForCall)
}

func (fake *FakeFileWriter) WriteVersionFileArgsForCall(i int) string {
	fake.writeVersionFileMutex.RLock()
	defer fake.writeVersionFileMutex.RUnlock()
	return fake.writeVersionFileArgsForCall[i].versionWithFingerprint
}

func (fake *FakeFileWriter) WriteVersionFileReturns(result1 error) {
	fake.WriteVersionFileStub = nil
	fake.writeVersionFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileWriter) WriteVersionFileReturnsOnCall(i int, result1 error) {
	fake.WriteVersionFileStub = nil
	if fake.writeVersionFileReturnsOnCall == nil {
		fake.writeVersionFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeVersionFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeMetadataJSONFileMutex.RLock()
	defer fake.writeMetadataJSONFileMutex.RUnlock()
	fake.writeMetadataYAMLFileMutex.RLock()
	defer fake.writeMetadataYAMLFileMutex.RUnlock()
	fake.writeVersionFileMutex.RLock()
	defer fake.writeVersionFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
