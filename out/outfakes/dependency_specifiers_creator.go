// This file was generated by counterfeiter
package outfakes

import (
	"sync"

	go_pivnet "github.com/pivotal-cf/go-pivnet"
)

type DependencySpecifiersCreator struct {
	CreateDependencySpecifierStub        func(release go_pivnet.Release) error
	createDependencySpecifierMutex       sync.RWMutex
	createDependencySpecifierArgsForCall []struct {
		release go_pivnet.Release
	}
	createDependencySpecifierReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DependencySpecifiersCreator) CreateDependencySpecifier(release go_pivnet.Release) error {
	fake.createDependencySpecifierMutex.Lock()
	fake.createDependencySpecifierArgsForCall = append(fake.createDependencySpecifierArgsForCall, struct {
		release go_pivnet.Release
	}{release})
	fake.recordInvocation("CreateDependencySpecifier", []interface{}{release})
	fake.createDependencySpecifierMutex.Unlock()
	if fake.CreateDependencySpecifierStub != nil {
		return fake.CreateDependencySpecifierStub(release)
	} else {
		return fake.createDependencySpecifierReturns.result1
	}
}

func (fake *DependencySpecifiersCreator) CreateDependencySpecifierCallCount() int {
	fake.createDependencySpecifierMutex.RLock()
	defer fake.createDependencySpecifierMutex.RUnlock()
	return len(fake.createDependencySpecifierArgsForCall)
}

func (fake *DependencySpecifiersCreator) CreateDependencySpecifierArgsForCall(i int) go_pivnet.Release {
	fake.createDependencySpecifierMutex.RLock()
	defer fake.createDependencySpecifierMutex.RUnlock()
	return fake.createDependencySpecifierArgsForCall[i].release
}

func (fake *DependencySpecifiersCreator) CreateDependencySpecifierReturns(result1 error) {
	fake.CreateDependencySpecifierStub = nil
	fake.createDependencySpecifierReturns = struct {
		result1 error
	}{result1}
}

func (fake *DependencySpecifiersCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDependencySpecifierMutex.RLock()
	defer fake.createDependencySpecifierMutex.RUnlock()
	return fake.invocations
}

func (fake *DependencySpecifiersCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
