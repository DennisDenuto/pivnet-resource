// Code generated by counterfeiter. DO NOT EDIT.
package outfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-resource/concourse"
)

type Finalizer struct {
	FinalizeStub        func(productSlug string, releaseVersion string) (concourse.OutResponse, error)
	finalizeMutex       sync.RWMutex
	finalizeArgsForCall []struct {
		productSlug    string
		releaseVersion string
	}
	finalizeReturns struct {
		result1 concourse.OutResponse
		result2 error
	}
	finalizeReturnsOnCall map[int]struct {
		result1 concourse.OutResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Finalizer) Finalize(productSlug string, releaseVersion string) (concourse.OutResponse, error) {
	fake.finalizeMutex.Lock()
	ret, specificReturn := fake.finalizeReturnsOnCall[len(fake.finalizeArgsForCall)]
	fake.finalizeArgsForCall = append(fake.finalizeArgsForCall, struct {
		productSlug    string
		releaseVersion string
	}{productSlug, releaseVersion})
	fake.recordInvocation("Finalize", []interface{}{productSlug, releaseVersion})
	fake.finalizeMutex.Unlock()
	if fake.FinalizeStub != nil {
		return fake.FinalizeStub(productSlug, releaseVersion)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.finalizeReturns.result1, fake.finalizeReturns.result2
}

func (fake *Finalizer) FinalizeCallCount() int {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return len(fake.finalizeArgsForCall)
}

func (fake *Finalizer) FinalizeArgsForCall(i int) (string, string) {
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	return fake.finalizeArgsForCall[i].productSlug, fake.finalizeArgsForCall[i].releaseVersion
}

func (fake *Finalizer) FinalizeReturns(result1 concourse.OutResponse, result2 error) {
	fake.FinalizeStub = nil
	fake.finalizeReturns = struct {
		result1 concourse.OutResponse
		result2 error
	}{result1, result2}
}

func (fake *Finalizer) FinalizeReturnsOnCall(i int, result1 concourse.OutResponse, result2 error) {
	fake.FinalizeStub = nil
	if fake.finalizeReturnsOnCall == nil {
		fake.finalizeReturnsOnCall = make(map[int]struct {
			result1 concourse.OutResponse
			result2 error
		})
	}
	fake.finalizeReturnsOnCall[i] = struct {
		result1 concourse.OutResponse
		result2 error
	}{result1, result2}
}

func (fake *Finalizer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.finalizeMutex.RLock()
	defer fake.finalizeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Finalizer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
