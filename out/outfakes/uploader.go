// This file was generated by counterfeiter
package outfakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/pivnet-resource/pivnet"
)

type Uploader struct {
	UploadStub        func(release pivnet.Release, exactGlobs []string) error
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		release    pivnet.Release
		exactGlobs []string
	}
	uploadReturns struct {
		result1 error
	}
}

func (fake *Uploader) Upload(release pivnet.Release, exactGlobs []string) error {
	var exactGlobsCopy []string
	if exactGlobs != nil {
		exactGlobsCopy = make([]string, len(exactGlobs))
		copy(exactGlobsCopy, exactGlobs)
	}
	fake.uploadMutex.Lock()
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		release    pivnet.Release
		exactGlobs []string
	}{release, exactGlobsCopy})
	fake.uploadMutex.Unlock()
	if fake.UploadStub != nil {
		return fake.UploadStub(release, exactGlobs)
	} else {
		return fake.uploadReturns.result1
	}
}

func (fake *Uploader) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *Uploader) UploadArgsForCall(i int) (pivnet.Release, []string) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return fake.uploadArgsForCall[i].release, fake.uploadArgsForCall[i].exactGlobs
}

func (fake *Uploader) UploadReturns(result1 error) {
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 error
	}{result1}
}
