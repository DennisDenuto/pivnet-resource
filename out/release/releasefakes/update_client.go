// This file was generated by counterfeiter
package releasefakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/pivnet-resource/pivnet"
)

type UpdateClient struct {
	UpdateReleaseStub        func(string, pivnet.Release) (pivnet.Release, error)
	updateReleaseMutex       sync.RWMutex
	updateReleaseArgsForCall []struct {
		arg1 string
		arg2 pivnet.Release
	}
	updateReleaseReturns struct {
		result1 pivnet.Release
		result2 error
	}
	ReleaseETagStub        func(string, pivnet.Release) (string, error)
	releaseETagMutex       sync.RWMutex
	releaseETagArgsForCall []struct {
		arg1 string
		arg2 pivnet.Release
	}
	releaseETagReturns struct {
		result1 string
		result2 error
	}
	AddUserGroupStub        func(productSlug string, releaseID int, userGroupID int) error
	addUserGroupMutex       sync.RWMutex
	addUserGroupArgsForCall []struct {
		productSlug string
		releaseID   int
		userGroupID int
	}
	addUserGroupReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UpdateClient) UpdateRelease(arg1 string, arg2 pivnet.Release) (pivnet.Release, error) {
	fake.updateReleaseMutex.Lock()
	fake.updateReleaseArgsForCall = append(fake.updateReleaseArgsForCall, struct {
		arg1 string
		arg2 pivnet.Release
	}{arg1, arg2})
	fake.recordInvocation("UpdateRelease", []interface{}{arg1, arg2})
	fake.updateReleaseMutex.Unlock()
	if fake.UpdateReleaseStub != nil {
		return fake.UpdateReleaseStub(arg1, arg2)
	} else {
		return fake.updateReleaseReturns.result1, fake.updateReleaseReturns.result2
	}
}

func (fake *UpdateClient) UpdateReleaseCallCount() int {
	fake.updateReleaseMutex.RLock()
	defer fake.updateReleaseMutex.RUnlock()
	return len(fake.updateReleaseArgsForCall)
}

func (fake *UpdateClient) UpdateReleaseArgsForCall(i int) (string, pivnet.Release) {
	fake.updateReleaseMutex.RLock()
	defer fake.updateReleaseMutex.RUnlock()
	return fake.updateReleaseArgsForCall[i].arg1, fake.updateReleaseArgsForCall[i].arg2
}

func (fake *UpdateClient) UpdateReleaseReturns(result1 pivnet.Release, result2 error) {
	fake.UpdateReleaseStub = nil
	fake.updateReleaseReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *UpdateClient) ReleaseETag(arg1 string, arg2 pivnet.Release) (string, error) {
	fake.releaseETagMutex.Lock()
	fake.releaseETagArgsForCall = append(fake.releaseETagArgsForCall, struct {
		arg1 string
		arg2 pivnet.Release
	}{arg1, arg2})
	fake.recordInvocation("ReleaseETag", []interface{}{arg1, arg2})
	fake.releaseETagMutex.Unlock()
	if fake.ReleaseETagStub != nil {
		return fake.ReleaseETagStub(arg1, arg2)
	} else {
		return fake.releaseETagReturns.result1, fake.releaseETagReturns.result2
	}
}

func (fake *UpdateClient) ReleaseETagCallCount() int {
	fake.releaseETagMutex.RLock()
	defer fake.releaseETagMutex.RUnlock()
	return len(fake.releaseETagArgsForCall)
}

func (fake *UpdateClient) ReleaseETagArgsForCall(i int) (string, pivnet.Release) {
	fake.releaseETagMutex.RLock()
	defer fake.releaseETagMutex.RUnlock()
	return fake.releaseETagArgsForCall[i].arg1, fake.releaseETagArgsForCall[i].arg2
}

func (fake *UpdateClient) ReleaseETagReturns(result1 string, result2 error) {
	fake.ReleaseETagStub = nil
	fake.releaseETagReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *UpdateClient) AddUserGroup(productSlug string, releaseID int, userGroupID int) error {
	fake.addUserGroupMutex.Lock()
	fake.addUserGroupArgsForCall = append(fake.addUserGroupArgsForCall, struct {
		productSlug string
		releaseID   int
		userGroupID int
	}{productSlug, releaseID, userGroupID})
	fake.recordInvocation("AddUserGroup", []interface{}{productSlug, releaseID, userGroupID})
	fake.addUserGroupMutex.Unlock()
	if fake.AddUserGroupStub != nil {
		return fake.AddUserGroupStub(productSlug, releaseID, userGroupID)
	} else {
		return fake.addUserGroupReturns.result1
	}
}

func (fake *UpdateClient) AddUserGroupCallCount() int {
	fake.addUserGroupMutex.RLock()
	defer fake.addUserGroupMutex.RUnlock()
	return len(fake.addUserGroupArgsForCall)
}

func (fake *UpdateClient) AddUserGroupArgsForCall(i int) (string, int, int) {
	fake.addUserGroupMutex.RLock()
	defer fake.addUserGroupMutex.RUnlock()
	return fake.addUserGroupArgsForCall[i].productSlug, fake.addUserGroupArgsForCall[i].releaseID, fake.addUserGroupArgsForCall[i].userGroupID
}

func (fake *UpdateClient) AddUserGroupReturns(result1 error) {
	fake.AddUserGroupStub = nil
	fake.addUserGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *UpdateClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateReleaseMutex.RLock()
	defer fake.updateReleaseMutex.RUnlock()
	fake.releaseETagMutex.RLock()
	defer fake.releaseETagMutex.RUnlock()
	fake.addUserGroupMutex.RLock()
	defer fake.addUserGroupMutex.RUnlock()
	return fake.invocations
}

func (fake *UpdateClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
