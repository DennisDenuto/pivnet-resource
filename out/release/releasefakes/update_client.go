// This file was generated by counterfeiter
package releasefakes

import "sync"

type UpdateClient struct {
	ReleaseFingerprintStub        func(productSlug string, releaseID int) (string, error)
	releaseFingerprintMutex       sync.RWMutex
	releaseFingerprintArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	releaseFingerprintReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UpdateClient) ReleaseFingerprint(productSlug string, releaseID int) (string, error) {
	fake.releaseFingerprintMutex.Lock()
	fake.releaseFingerprintArgsForCall = append(fake.releaseFingerprintArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.recordInvocation("ReleaseFingerprint", []interface{}{productSlug, releaseID})
	fake.releaseFingerprintMutex.Unlock()
	if fake.ReleaseFingerprintStub != nil {
		return fake.ReleaseFingerprintStub(productSlug, releaseID)
	} else {
		return fake.releaseFingerprintReturns.result1, fake.releaseFingerprintReturns.result2
	}
}

func (fake *UpdateClient) ReleaseFingerprintCallCount() int {
	fake.releaseFingerprintMutex.RLock()
	defer fake.releaseFingerprintMutex.RUnlock()
	return len(fake.releaseFingerprintArgsForCall)
}

func (fake *UpdateClient) ReleaseFingerprintArgsForCall(i int) (string, int) {
	fake.releaseFingerprintMutex.RLock()
	defer fake.releaseFingerprintMutex.RUnlock()
	return fake.releaseFingerprintArgsForCall[i].productSlug, fake.releaseFingerprintArgsForCall[i].releaseID
}

func (fake *UpdateClient) ReleaseFingerprintReturns(result1 string, result2 error) {
	fake.ReleaseFingerprintStub = nil
	fake.releaseFingerprintReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *UpdateClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.releaseFingerprintMutex.RLock()
	defer fake.releaseFingerprintMutex.RUnlock()
	return fake.invocations
}

func (fake *UpdateClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
