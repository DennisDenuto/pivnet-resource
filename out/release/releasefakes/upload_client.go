// This file was generated by counterfeiter
package releasefakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/go-pivnet"
)

type UploadClient struct {
	FindProductForSlugStub        func(slug string) (pivnet.Product, error)
	findProductForSlugMutex       sync.RWMutex
	findProductForSlugArgsForCall []struct {
		slug string
	}
	findProductForSlugReturns struct {
		result1 pivnet.Product
		result2 error
	}
	CreateProductFileStub        func(pivnet.CreateProductFileConfig) (pivnet.ProductFile, error)
	createProductFileMutex       sync.RWMutex
	createProductFileArgsForCall []struct {
		arg1 pivnet.CreateProductFileConfig
	}
	createProductFileReturns struct {
		result1 pivnet.ProductFile
		result2 error
	}
	AddProductFileStub        func(productSlug string, releaseID int, productFileID int) error
	addProductFileMutex       sync.RWMutex
	addProductFileArgsForCall []struct {
		productSlug   string
		releaseID     int
		productFileID int
	}
	addProductFileReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UploadClient) FindProductForSlug(slug string) (pivnet.Product, error) {
	fake.findProductForSlugMutex.Lock()
	fake.findProductForSlugArgsForCall = append(fake.findProductForSlugArgsForCall, struct {
		slug string
	}{slug})
	fake.recordInvocation("FindProductForSlug", []interface{}{slug})
	fake.findProductForSlugMutex.Unlock()
	if fake.FindProductForSlugStub != nil {
		return fake.FindProductForSlugStub(slug)
	} else {
		return fake.findProductForSlugReturns.result1, fake.findProductForSlugReturns.result2
	}
}

func (fake *UploadClient) FindProductForSlugCallCount() int {
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return len(fake.findProductForSlugArgsForCall)
}

func (fake *UploadClient) FindProductForSlugArgsForCall(i int) string {
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return fake.findProductForSlugArgsForCall[i].slug
}

func (fake *UploadClient) FindProductForSlugReturns(result1 pivnet.Product, result2 error) {
	fake.FindProductForSlugStub = nil
	fake.findProductForSlugReturns = struct {
		result1 pivnet.Product
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) CreateProductFile(arg1 pivnet.CreateProductFileConfig) (pivnet.ProductFile, error) {
	fake.createProductFileMutex.Lock()
	fake.createProductFileArgsForCall = append(fake.createProductFileArgsForCall, struct {
		arg1 pivnet.CreateProductFileConfig
	}{arg1})
	fake.recordInvocation("CreateProductFile", []interface{}{arg1})
	fake.createProductFileMutex.Unlock()
	if fake.CreateProductFileStub != nil {
		return fake.CreateProductFileStub(arg1)
	} else {
		return fake.createProductFileReturns.result1, fake.createProductFileReturns.result2
	}
}

func (fake *UploadClient) CreateProductFileCallCount() int {
	fake.createProductFileMutex.RLock()
	defer fake.createProductFileMutex.RUnlock()
	return len(fake.createProductFileArgsForCall)
}

func (fake *UploadClient) CreateProductFileArgsForCall(i int) pivnet.CreateProductFileConfig {
	fake.createProductFileMutex.RLock()
	defer fake.createProductFileMutex.RUnlock()
	return fake.createProductFileArgsForCall[i].arg1
}

func (fake *UploadClient) CreateProductFileReturns(result1 pivnet.ProductFile, result2 error) {
	fake.CreateProductFileStub = nil
	fake.createProductFileReturns = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *UploadClient) AddProductFile(productSlug string, releaseID int, productFileID int) error {
	fake.addProductFileMutex.Lock()
	fake.addProductFileArgsForCall = append(fake.addProductFileArgsForCall, struct {
		productSlug   string
		releaseID     int
		productFileID int
	}{productSlug, releaseID, productFileID})
	fake.recordInvocation("AddProductFile", []interface{}{productSlug, releaseID, productFileID})
	fake.addProductFileMutex.Unlock()
	if fake.AddProductFileStub != nil {
		return fake.AddProductFileStub(productSlug, releaseID, productFileID)
	} else {
		return fake.addProductFileReturns.result1
	}
}

func (fake *UploadClient) AddProductFileCallCount() int {
	fake.addProductFileMutex.RLock()
	defer fake.addProductFileMutex.RUnlock()
	return len(fake.addProductFileArgsForCall)
}

func (fake *UploadClient) AddProductFileArgsForCall(i int) (string, int, int) {
	fake.addProductFileMutex.RLock()
	defer fake.addProductFileMutex.RUnlock()
	return fake.addProductFileArgsForCall[i].productSlug, fake.addProductFileArgsForCall[i].releaseID, fake.addProductFileArgsForCall[i].productFileID
}

func (fake *UploadClient) AddProductFileReturns(result1 error) {
	fake.AddProductFileStub = nil
	fake.addProductFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *UploadClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	fake.createProductFileMutex.RLock()
	defer fake.createProductFileMutex.RUnlock()
	fake.addProductFileMutex.RLock()
	defer fake.addProductFileMutex.RUnlock()
	return fake.invocations
}

func (fake *UploadClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
