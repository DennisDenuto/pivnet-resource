// This file was generated by counterfeiter
package releasefakes

import "sync"

type Fetcher struct {
	FetchStub        func(yamlKey, dir, file string) string
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		yamlKey string
		dir     string
		file    string
	}
	fetchReturns struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fetcher) Fetch(yamlKey string, dir string, file string) string {
	fake.fetchMutex.Lock()
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		yamlKey string
		dir     string
		file    string
	}{yamlKey, dir, file})
	fake.recordInvocation("Fetch", []interface{}{yamlKey, dir, file})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(yamlKey, dir, file)
	} else {
		return fake.fetchReturns.result1
	}
}

func (fake *Fetcher) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *Fetcher) FetchArgsForCall(i int) (string, string, string) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].yamlKey, fake.fetchArgsForCall[i].dir, fake.fetchArgsForCall[i].file
}

func (fake *Fetcher) FetchReturns(result1 string) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 string
	}{result1}
}

func (fake *Fetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.invocations
}

func (fake *Fetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
