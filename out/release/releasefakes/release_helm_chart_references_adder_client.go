// Code generated by counterfeiter. DO NOT EDIT.
package releasefakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v3"
)

type ReleaseHelmChartReferencesAdderClient struct {
	HelmChartReferencesStub        func(productSlug string) ([]pivnet.HelmChartReference, error)
	helmChartReferencesMutex       sync.RWMutex
	helmChartReferencesArgsForCall []struct {
		productSlug string
	}
	helmChartReferencesReturns struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}
	helmChartReferencesReturnsOnCall map[int]struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}
	AddHelmChartReferenceStub        func(productSlug string, releaseID int, helmChartReferenceID int) error
	addHelmChartReferenceMutex       sync.RWMutex
	addHelmChartReferenceArgsForCall []struct {
		productSlug          string
		releaseID            int
		helmChartReferenceID int
	}
	addHelmChartReferenceReturns struct {
		result1 error
	}
	addHelmChartReferenceReturnsOnCall map[int]struct {
		result1 error
	}
	CreateHelmChartReferenceStub        func(config pivnet.CreateHelmChartReferenceConfig) (pivnet.HelmChartReference, error)
	createHelmChartReferenceMutex       sync.RWMutex
	createHelmChartReferenceArgsForCall []struct {
		config pivnet.CreateHelmChartReferenceConfig
	}
	createHelmChartReferenceReturns struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	createHelmChartReferenceReturnsOnCall map[int]struct {
		result1 pivnet.HelmChartReference
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseHelmChartReferencesAdderClient) HelmChartReferences(productSlug string) ([]pivnet.HelmChartReference, error) {
	fake.helmChartReferencesMutex.Lock()
	ret, specificReturn := fake.helmChartReferencesReturnsOnCall[len(fake.helmChartReferencesArgsForCall)]
	fake.helmChartReferencesArgsForCall = append(fake.helmChartReferencesArgsForCall, struct {
		productSlug string
	}{productSlug})
	fake.recordInvocation("HelmChartReferences", []interface{}{productSlug})
	fake.helmChartReferencesMutex.Unlock()
	if fake.HelmChartReferencesStub != nil {
		return fake.HelmChartReferencesStub(productSlug)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.helmChartReferencesReturns.result1, fake.helmChartReferencesReturns.result2
}

func (fake *ReleaseHelmChartReferencesAdderClient) HelmChartReferencesCallCount() int {
	fake.helmChartReferencesMutex.RLock()
	defer fake.helmChartReferencesMutex.RUnlock()
	return len(fake.helmChartReferencesArgsForCall)
}

func (fake *ReleaseHelmChartReferencesAdderClient) HelmChartReferencesArgsForCall(i int) string {
	fake.helmChartReferencesMutex.RLock()
	defer fake.helmChartReferencesMutex.RUnlock()
	return fake.helmChartReferencesArgsForCall[i].productSlug
}

func (fake *ReleaseHelmChartReferencesAdderClient) HelmChartReferencesReturns(result1 []pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferencesStub = nil
	fake.helmChartReferencesReturns = struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *ReleaseHelmChartReferencesAdderClient) HelmChartReferencesReturnsOnCall(i int, result1 []pivnet.HelmChartReference, result2 error) {
	fake.HelmChartReferencesStub = nil
	if fake.helmChartReferencesReturnsOnCall == nil {
		fake.helmChartReferencesReturnsOnCall = make(map[int]struct {
			result1 []pivnet.HelmChartReference
			result2 error
		})
	}
	fake.helmChartReferencesReturnsOnCall[i] = struct {
		result1 []pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *ReleaseHelmChartReferencesAdderClient) AddHelmChartReference(productSlug string, releaseID int, helmChartReferenceID int) error {
	fake.addHelmChartReferenceMutex.Lock()
	ret, specificReturn := fake.addHelmChartReferenceReturnsOnCall[len(fake.addHelmChartReferenceArgsForCall)]
	fake.addHelmChartReferenceArgsForCall = append(fake.addHelmChartReferenceArgsForCall, struct {
		productSlug          string
		releaseID            int
		helmChartReferenceID int
	}{productSlug, releaseID, helmChartReferenceID})
	fake.recordInvocation("AddHelmChartReference", []interface{}{productSlug, releaseID, helmChartReferenceID})
	fake.addHelmChartReferenceMutex.Unlock()
	if fake.AddHelmChartReferenceStub != nil {
		return fake.AddHelmChartReferenceStub(productSlug, releaseID, helmChartReferenceID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addHelmChartReferenceReturns.result1
}

func (fake *ReleaseHelmChartReferencesAdderClient) AddHelmChartReferenceCallCount() int {
	fake.addHelmChartReferenceMutex.RLock()
	defer fake.addHelmChartReferenceMutex.RUnlock()
	return len(fake.addHelmChartReferenceArgsForCall)
}

func (fake *ReleaseHelmChartReferencesAdderClient) AddHelmChartReferenceArgsForCall(i int) (string, int, int) {
	fake.addHelmChartReferenceMutex.RLock()
	defer fake.addHelmChartReferenceMutex.RUnlock()
	return fake.addHelmChartReferenceArgsForCall[i].productSlug, fake.addHelmChartReferenceArgsForCall[i].releaseID, fake.addHelmChartReferenceArgsForCall[i].helmChartReferenceID
}

func (fake *ReleaseHelmChartReferencesAdderClient) AddHelmChartReferenceReturns(result1 error) {
	fake.AddHelmChartReferenceStub = nil
	fake.addHelmChartReferenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseHelmChartReferencesAdderClient) AddHelmChartReferenceReturnsOnCall(i int, result1 error) {
	fake.AddHelmChartReferenceStub = nil
	if fake.addHelmChartReferenceReturnsOnCall == nil {
		fake.addHelmChartReferenceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addHelmChartReferenceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ReleaseHelmChartReferencesAdderClient) CreateHelmChartReference(config pivnet.CreateHelmChartReferenceConfig) (pivnet.HelmChartReference, error) {
	fake.createHelmChartReferenceMutex.Lock()
	ret, specificReturn := fake.createHelmChartReferenceReturnsOnCall[len(fake.createHelmChartReferenceArgsForCall)]
	fake.createHelmChartReferenceArgsForCall = append(fake.createHelmChartReferenceArgsForCall, struct {
		config pivnet.CreateHelmChartReferenceConfig
	}{config})
	fake.recordInvocation("CreateHelmChartReference", []interface{}{config})
	fake.createHelmChartReferenceMutex.Unlock()
	if fake.CreateHelmChartReferenceStub != nil {
		return fake.CreateHelmChartReferenceStub(config)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createHelmChartReferenceReturns.result1, fake.createHelmChartReferenceReturns.result2
}

func (fake *ReleaseHelmChartReferencesAdderClient) CreateHelmChartReferenceCallCount() int {
	fake.createHelmChartReferenceMutex.RLock()
	defer fake.createHelmChartReferenceMutex.RUnlock()
	return len(fake.createHelmChartReferenceArgsForCall)
}

func (fake *ReleaseHelmChartReferencesAdderClient) CreateHelmChartReferenceArgsForCall(i int) pivnet.CreateHelmChartReferenceConfig {
	fake.createHelmChartReferenceMutex.RLock()
	defer fake.createHelmChartReferenceMutex.RUnlock()
	return fake.createHelmChartReferenceArgsForCall[i].config
}

func (fake *ReleaseHelmChartReferencesAdderClient) CreateHelmChartReferenceReturns(result1 pivnet.HelmChartReference, result2 error) {
	fake.CreateHelmChartReferenceStub = nil
	fake.createHelmChartReferenceReturns = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *ReleaseHelmChartReferencesAdderClient) CreateHelmChartReferenceReturnsOnCall(i int, result1 pivnet.HelmChartReference, result2 error) {
	fake.CreateHelmChartReferenceStub = nil
	if fake.createHelmChartReferenceReturnsOnCall == nil {
		fake.createHelmChartReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.HelmChartReference
			result2 error
		})
	}
	fake.createHelmChartReferenceReturnsOnCall[i] = struct {
		result1 pivnet.HelmChartReference
		result2 error
	}{result1, result2}
}

func (fake *ReleaseHelmChartReferencesAdderClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.helmChartReferencesMutex.RLock()
	defer fake.helmChartReferencesMutex.RUnlock()
	fake.addHelmChartReferenceMutex.RLock()
	defer fake.addHelmChartReferenceMutex.RUnlock()
	fake.createHelmChartReferenceMutex.RLock()
	defer fake.createHelmChartReferenceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseHelmChartReferencesAdderClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
