// This file was generated by counterfeiter
package pivnetfakes

import (
	"sync"

	"github.com/pivotal-cf-experimental/pivnet-resource/pivnet"
)

type FakeClient struct {
	ProductVersionsStub        func(productSlug string, releases []pivnet.Release) ([]string, error)
	productVersionsMutex       sync.RWMutex
	productVersionsArgsForCall []struct {
		productSlug string
		releases    []pivnet.Release
	}
	productVersionsReturns struct {
		result1 []string
		result2 error
	}
	CreateReleaseStub        func(pivnet.CreateReleaseConfig) (pivnet.Release, error)
	createReleaseMutex       sync.RWMutex
	createReleaseArgsForCall []struct {
		arg1 pivnet.CreateReleaseConfig
	}
	createReleaseReturns struct {
		result1 pivnet.Release
		result2 error
	}
	ReleasesForProductSlugStub        func(string) ([]pivnet.Release, error)
	releasesForProductSlugMutex       sync.RWMutex
	releasesForProductSlugArgsForCall []struct {
		arg1 string
	}
	releasesForProductSlugReturns struct {
		result1 []pivnet.Release
		result2 error
	}
	GetReleaseStub        func(productSlug string, version string) (pivnet.Release, error)
	getReleaseMutex       sync.RWMutex
	getReleaseArgsForCall []struct {
		productSlug string
		version     string
	}
	getReleaseReturns struct {
		result1 pivnet.Release
		result2 error
	}
	UpdateReleaseStub        func(string, pivnet.Release) (pivnet.Release, error)
	updateReleaseMutex       sync.RWMutex
	updateReleaseArgsForCall []struct {
		arg1 string
		arg2 pivnet.Release
	}
	updateReleaseReturns struct {
		result1 pivnet.Release
		result2 error
	}
	DeleteReleaseStub        func(pivnet.Release, string) error
	deleteReleaseMutex       sync.RWMutex
	deleteReleaseArgsForCall []struct {
		arg1 pivnet.Release
		arg2 string
	}
	deleteReleaseReturns struct {
		result1 error
	}
	GetProductFilesStub        func(pivnet.Release) (pivnet.ProductFiles, error)
	getProductFilesMutex       sync.RWMutex
	getProductFilesArgsForCall []struct {
		arg1 pivnet.Release
	}
	getProductFilesReturns struct {
		result1 pivnet.ProductFiles
		result2 error
	}
	GetProductFileStub        func(productSlug string, releaseID int, productID int) (pivnet.ProductFile, error)
	getProductFileMutex       sync.RWMutex
	getProductFileArgsForCall []struct {
		productSlug string
		releaseID   int
		productID   int
	}
	getProductFileReturns struct {
		result1 pivnet.ProductFile
		result2 error
	}
	EULAsStub        func() ([]pivnet.EULA, error)
	eULAsMutex       sync.RWMutex
	eULAsArgsForCall []struct{}
	eULAsReturns     struct {
		result1 []pivnet.EULA
		result2 error
	}
	AcceptEULAStub        func(productSlug string, releaseID int) error
	acceptEULAMutex       sync.RWMutex
	acceptEULAArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	acceptEULAReturns struct {
		result1 error
	}
	CreateProductFileStub        func(pivnet.CreateProductFileConfig) (pivnet.ProductFile, error)
	createProductFileMutex       sync.RWMutex
	createProductFileArgsForCall []struct {
		arg1 pivnet.CreateProductFileConfig
	}
	createProductFileReturns struct {
		result1 pivnet.ProductFile
		result2 error
	}
	DeleteProductFileStub        func(productSlug string, id int) (pivnet.ProductFile, error)
	deleteProductFileMutex       sync.RWMutex
	deleteProductFileArgsForCall []struct {
		productSlug string
		id          int
	}
	deleteProductFileReturns struct {
		result1 pivnet.ProductFile
		result2 error
	}
	AddProductFileStub        func(productID int, releaseID int, productFileID int) error
	addProductFileMutex       sync.RWMutex
	addProductFileArgsForCall []struct {
		productID     int
		releaseID     int
		productFileID int
	}
	addProductFileReturns struct {
		result1 error
	}
	FindProductForSlugStub        func(slug string) (pivnet.Product, error)
	findProductForSlugMutex       sync.RWMutex
	findProductForSlugArgsForCall []struct {
		slug string
	}
	findProductForSlugReturns struct {
		result1 pivnet.Product
		result2 error
	}
	UserGroupsStub        func(productSlug string, releaseID int) ([]pivnet.UserGroup, error)
	userGroupsMutex       sync.RWMutex
	userGroupsArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	userGroupsReturns struct {
		result1 []pivnet.UserGroup
		result2 error
	}
	AddUserGroupStub        func(productSlug string, releaseID int, userGroupID int) error
	addUserGroupMutex       sync.RWMutex
	addUserGroupArgsForCall []struct {
		productSlug string
		releaseID   int
		userGroupID int
	}
	addUserGroupReturns struct {
		result1 error
	}
	ReleaseETagStub        func(string, pivnet.Release) (string, error)
	releaseETagMutex       sync.RWMutex
	releaseETagArgsForCall []struct {
		arg1 string
		arg2 pivnet.Release
	}
	releaseETagReturns struct {
		result1 string
		result2 error
	}
	ReleaseTypesStub        func() ([]string, error)
	releaseTypesMutex       sync.RWMutex
	releaseTypesArgsForCall []struct{}
	releaseTypesReturns     struct {
		result1 []string
		result2 error
	}
	ReleaseDependenciesStub        func(productSlug string, releaseID int) ([]pivnet.ReleaseDependency, error)
	releaseDependenciesMutex       sync.RWMutex
	releaseDependenciesArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	releaseDependenciesReturns struct {
		result1 []pivnet.ReleaseDependency
		result2 error
	}
}

func (fake *FakeClient) ProductVersions(productSlug string, releases []pivnet.Release) ([]string, error) {
	fake.productVersionsMutex.Lock()
	fake.productVersionsArgsForCall = append(fake.productVersionsArgsForCall, struct {
		productSlug string
		releases    []pivnet.Release
	}{productSlug, releases})
	fake.productVersionsMutex.Unlock()
	if fake.ProductVersionsStub != nil {
		return fake.ProductVersionsStub(productSlug, releases)
	} else {
		return fake.productVersionsReturns.result1, fake.productVersionsReturns.result2
	}
}

func (fake *FakeClient) ProductVersionsCallCount() int {
	fake.productVersionsMutex.RLock()
	defer fake.productVersionsMutex.RUnlock()
	return len(fake.productVersionsArgsForCall)
}

func (fake *FakeClient) ProductVersionsArgsForCall(i int) (string, []pivnet.Release) {
	fake.productVersionsMutex.RLock()
	defer fake.productVersionsMutex.RUnlock()
	return fake.productVersionsArgsForCall[i].productSlug, fake.productVersionsArgsForCall[i].releases
}

func (fake *FakeClient) ProductVersionsReturns(result1 []string, result2 error) {
	fake.ProductVersionsStub = nil
	fake.productVersionsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateRelease(arg1 pivnet.CreateReleaseConfig) (pivnet.Release, error) {
	fake.createReleaseMutex.Lock()
	fake.createReleaseArgsForCall = append(fake.createReleaseArgsForCall, struct {
		arg1 pivnet.CreateReleaseConfig
	}{arg1})
	fake.createReleaseMutex.Unlock()
	if fake.CreateReleaseStub != nil {
		return fake.CreateReleaseStub(arg1)
	} else {
		return fake.createReleaseReturns.result1, fake.createReleaseReturns.result2
	}
}

func (fake *FakeClient) CreateReleaseCallCount() int {
	fake.createReleaseMutex.RLock()
	defer fake.createReleaseMutex.RUnlock()
	return len(fake.createReleaseArgsForCall)
}

func (fake *FakeClient) CreateReleaseArgsForCall(i int) pivnet.CreateReleaseConfig {
	fake.createReleaseMutex.RLock()
	defer fake.createReleaseMutex.RUnlock()
	return fake.createReleaseArgsForCall[i].arg1
}

func (fake *FakeClient) CreateReleaseReturns(result1 pivnet.Release, result2 error) {
	fake.CreateReleaseStub = nil
	fake.createReleaseReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ReleasesForProductSlug(arg1 string) ([]pivnet.Release, error) {
	fake.releasesForProductSlugMutex.Lock()
	fake.releasesForProductSlugArgsForCall = append(fake.releasesForProductSlugArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.releasesForProductSlugMutex.Unlock()
	if fake.ReleasesForProductSlugStub != nil {
		return fake.ReleasesForProductSlugStub(arg1)
	} else {
		return fake.releasesForProductSlugReturns.result1, fake.releasesForProductSlugReturns.result2
	}
}

func (fake *FakeClient) ReleasesForProductSlugCallCount() int {
	fake.releasesForProductSlugMutex.RLock()
	defer fake.releasesForProductSlugMutex.RUnlock()
	return len(fake.releasesForProductSlugArgsForCall)
}

func (fake *FakeClient) ReleasesForProductSlugArgsForCall(i int) string {
	fake.releasesForProductSlugMutex.RLock()
	defer fake.releasesForProductSlugMutex.RUnlock()
	return fake.releasesForProductSlugArgsForCall[i].arg1
}

func (fake *FakeClient) ReleasesForProductSlugReturns(result1 []pivnet.Release, result2 error) {
	fake.ReleasesForProductSlugStub = nil
	fake.releasesForProductSlugReturns = struct {
		result1 []pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetRelease(productSlug string, version string) (pivnet.Release, error) {
	fake.getReleaseMutex.Lock()
	fake.getReleaseArgsForCall = append(fake.getReleaseArgsForCall, struct {
		productSlug string
		version     string
	}{productSlug, version})
	fake.getReleaseMutex.Unlock()
	if fake.GetReleaseStub != nil {
		return fake.GetReleaseStub(productSlug, version)
	} else {
		return fake.getReleaseReturns.result1, fake.getReleaseReturns.result2
	}
}

func (fake *FakeClient) GetReleaseCallCount() int {
	fake.getReleaseMutex.RLock()
	defer fake.getReleaseMutex.RUnlock()
	return len(fake.getReleaseArgsForCall)
}

func (fake *FakeClient) GetReleaseArgsForCall(i int) (string, string) {
	fake.getReleaseMutex.RLock()
	defer fake.getReleaseMutex.RUnlock()
	return fake.getReleaseArgsForCall[i].productSlug, fake.getReleaseArgsForCall[i].version
}

func (fake *FakeClient) GetReleaseReturns(result1 pivnet.Release, result2 error) {
	fake.GetReleaseStub = nil
	fake.getReleaseReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateRelease(arg1 string, arg2 pivnet.Release) (pivnet.Release, error) {
	fake.updateReleaseMutex.Lock()
	fake.updateReleaseArgsForCall = append(fake.updateReleaseArgsForCall, struct {
		arg1 string
		arg2 pivnet.Release
	}{arg1, arg2})
	fake.updateReleaseMutex.Unlock()
	if fake.UpdateReleaseStub != nil {
		return fake.UpdateReleaseStub(arg1, arg2)
	} else {
		return fake.updateReleaseReturns.result1, fake.updateReleaseReturns.result2
	}
}

func (fake *FakeClient) UpdateReleaseCallCount() int {
	fake.updateReleaseMutex.RLock()
	defer fake.updateReleaseMutex.RUnlock()
	return len(fake.updateReleaseArgsForCall)
}

func (fake *FakeClient) UpdateReleaseArgsForCall(i int) (string, pivnet.Release) {
	fake.updateReleaseMutex.RLock()
	defer fake.updateReleaseMutex.RUnlock()
	return fake.updateReleaseArgsForCall[i].arg1, fake.updateReleaseArgsForCall[i].arg2
}

func (fake *FakeClient) UpdateReleaseReturns(result1 pivnet.Release, result2 error) {
	fake.UpdateReleaseStub = nil
	fake.updateReleaseReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteRelease(arg1 pivnet.Release, arg2 string) error {
	fake.deleteReleaseMutex.Lock()
	fake.deleteReleaseArgsForCall = append(fake.deleteReleaseArgsForCall, struct {
		arg1 pivnet.Release
		arg2 string
	}{arg1, arg2})
	fake.deleteReleaseMutex.Unlock()
	if fake.DeleteReleaseStub != nil {
		return fake.DeleteReleaseStub(arg1, arg2)
	} else {
		return fake.deleteReleaseReturns.result1
	}
}

func (fake *FakeClient) DeleteReleaseCallCount() int {
	fake.deleteReleaseMutex.RLock()
	defer fake.deleteReleaseMutex.RUnlock()
	return len(fake.deleteReleaseArgsForCall)
}

func (fake *FakeClient) DeleteReleaseArgsForCall(i int) (pivnet.Release, string) {
	fake.deleteReleaseMutex.RLock()
	defer fake.deleteReleaseMutex.RUnlock()
	return fake.deleteReleaseArgsForCall[i].arg1, fake.deleteReleaseArgsForCall[i].arg2
}

func (fake *FakeClient) DeleteReleaseReturns(result1 error) {
	fake.DeleteReleaseStub = nil
	fake.deleteReleaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetProductFiles(arg1 pivnet.Release) (pivnet.ProductFiles, error) {
	fake.getProductFilesMutex.Lock()
	fake.getProductFilesArgsForCall = append(fake.getProductFilesArgsForCall, struct {
		arg1 pivnet.Release
	}{arg1})
	fake.getProductFilesMutex.Unlock()
	if fake.GetProductFilesStub != nil {
		return fake.GetProductFilesStub(arg1)
	} else {
		return fake.getProductFilesReturns.result1, fake.getProductFilesReturns.result2
	}
}

func (fake *FakeClient) GetProductFilesCallCount() int {
	fake.getProductFilesMutex.RLock()
	defer fake.getProductFilesMutex.RUnlock()
	return len(fake.getProductFilesArgsForCall)
}

func (fake *FakeClient) GetProductFilesArgsForCall(i int) pivnet.Release {
	fake.getProductFilesMutex.RLock()
	defer fake.getProductFilesMutex.RUnlock()
	return fake.getProductFilesArgsForCall[i].arg1
}

func (fake *FakeClient) GetProductFilesReturns(result1 pivnet.ProductFiles, result2 error) {
	fake.GetProductFilesStub = nil
	fake.getProductFilesReturns = struct {
		result1 pivnet.ProductFiles
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetProductFile(productSlug string, releaseID int, productID int) (pivnet.ProductFile, error) {
	fake.getProductFileMutex.Lock()
	fake.getProductFileArgsForCall = append(fake.getProductFileArgsForCall, struct {
		productSlug string
		releaseID   int
		productID   int
	}{productSlug, releaseID, productID})
	fake.getProductFileMutex.Unlock()
	if fake.GetProductFileStub != nil {
		return fake.GetProductFileStub(productSlug, releaseID, productID)
	} else {
		return fake.getProductFileReturns.result1, fake.getProductFileReturns.result2
	}
}

func (fake *FakeClient) GetProductFileCallCount() int {
	fake.getProductFileMutex.RLock()
	defer fake.getProductFileMutex.RUnlock()
	return len(fake.getProductFileArgsForCall)
}

func (fake *FakeClient) GetProductFileArgsForCall(i int) (string, int, int) {
	fake.getProductFileMutex.RLock()
	defer fake.getProductFileMutex.RUnlock()
	return fake.getProductFileArgsForCall[i].productSlug, fake.getProductFileArgsForCall[i].releaseID, fake.getProductFileArgsForCall[i].productID
}

func (fake *FakeClient) GetProductFileReturns(result1 pivnet.ProductFile, result2 error) {
	fake.GetProductFileStub = nil
	fake.getProductFileReturns = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) EULAs() ([]pivnet.EULA, error) {
	fake.eULAsMutex.Lock()
	fake.eULAsArgsForCall = append(fake.eULAsArgsForCall, struct{}{})
	fake.eULAsMutex.Unlock()
	if fake.EULAsStub != nil {
		return fake.EULAsStub()
	} else {
		return fake.eULAsReturns.result1, fake.eULAsReturns.result2
	}
}

func (fake *FakeClient) EULAsCallCount() int {
	fake.eULAsMutex.RLock()
	defer fake.eULAsMutex.RUnlock()
	return len(fake.eULAsArgsForCall)
}

func (fake *FakeClient) EULAsReturns(result1 []pivnet.EULA, result2 error) {
	fake.EULAsStub = nil
	fake.eULAsReturns = struct {
		result1 []pivnet.EULA
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) AcceptEULA(productSlug string, releaseID int) error {
	fake.acceptEULAMutex.Lock()
	fake.acceptEULAArgsForCall = append(fake.acceptEULAArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.acceptEULAMutex.Unlock()
	if fake.AcceptEULAStub != nil {
		return fake.AcceptEULAStub(productSlug, releaseID)
	} else {
		return fake.acceptEULAReturns.result1
	}
}

func (fake *FakeClient) AcceptEULACallCount() int {
	fake.acceptEULAMutex.RLock()
	defer fake.acceptEULAMutex.RUnlock()
	return len(fake.acceptEULAArgsForCall)
}

func (fake *FakeClient) AcceptEULAArgsForCall(i int) (string, int) {
	fake.acceptEULAMutex.RLock()
	defer fake.acceptEULAMutex.RUnlock()
	return fake.acceptEULAArgsForCall[i].productSlug, fake.acceptEULAArgsForCall[i].releaseID
}

func (fake *FakeClient) AcceptEULAReturns(result1 error) {
	fake.AcceptEULAStub = nil
	fake.acceptEULAReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateProductFile(arg1 pivnet.CreateProductFileConfig) (pivnet.ProductFile, error) {
	fake.createProductFileMutex.Lock()
	fake.createProductFileArgsForCall = append(fake.createProductFileArgsForCall, struct {
		arg1 pivnet.CreateProductFileConfig
	}{arg1})
	fake.createProductFileMutex.Unlock()
	if fake.CreateProductFileStub != nil {
		return fake.CreateProductFileStub(arg1)
	} else {
		return fake.createProductFileReturns.result1, fake.createProductFileReturns.result2
	}
}

func (fake *FakeClient) CreateProductFileCallCount() int {
	fake.createProductFileMutex.RLock()
	defer fake.createProductFileMutex.RUnlock()
	return len(fake.createProductFileArgsForCall)
}

func (fake *FakeClient) CreateProductFileArgsForCall(i int) pivnet.CreateProductFileConfig {
	fake.createProductFileMutex.RLock()
	defer fake.createProductFileMutex.RUnlock()
	return fake.createProductFileArgsForCall[i].arg1
}

func (fake *FakeClient) CreateProductFileReturns(result1 pivnet.ProductFile, result2 error) {
	fake.CreateProductFileStub = nil
	fake.createProductFileReturns = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteProductFile(productSlug string, id int) (pivnet.ProductFile, error) {
	fake.deleteProductFileMutex.Lock()
	fake.deleteProductFileArgsForCall = append(fake.deleteProductFileArgsForCall, struct {
		productSlug string
		id          int
	}{productSlug, id})
	fake.deleteProductFileMutex.Unlock()
	if fake.DeleteProductFileStub != nil {
		return fake.DeleteProductFileStub(productSlug, id)
	} else {
		return fake.deleteProductFileReturns.result1, fake.deleteProductFileReturns.result2
	}
}

func (fake *FakeClient) DeleteProductFileCallCount() int {
	fake.deleteProductFileMutex.RLock()
	defer fake.deleteProductFileMutex.RUnlock()
	return len(fake.deleteProductFileArgsForCall)
}

func (fake *FakeClient) DeleteProductFileArgsForCall(i int) (string, int) {
	fake.deleteProductFileMutex.RLock()
	defer fake.deleteProductFileMutex.RUnlock()
	return fake.deleteProductFileArgsForCall[i].productSlug, fake.deleteProductFileArgsForCall[i].id
}

func (fake *FakeClient) DeleteProductFileReturns(result1 pivnet.ProductFile, result2 error) {
	fake.DeleteProductFileStub = nil
	fake.deleteProductFileReturns = struct {
		result1 pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) AddProductFile(productID int, releaseID int, productFileID int) error {
	fake.addProductFileMutex.Lock()
	fake.addProductFileArgsForCall = append(fake.addProductFileArgsForCall, struct {
		productID     int
		releaseID     int
		productFileID int
	}{productID, releaseID, productFileID})
	fake.addProductFileMutex.Unlock()
	if fake.AddProductFileStub != nil {
		return fake.AddProductFileStub(productID, releaseID, productFileID)
	} else {
		return fake.addProductFileReturns.result1
	}
}

func (fake *FakeClient) AddProductFileCallCount() int {
	fake.addProductFileMutex.RLock()
	defer fake.addProductFileMutex.RUnlock()
	return len(fake.addProductFileArgsForCall)
}

func (fake *FakeClient) AddProductFileArgsForCall(i int) (int, int, int) {
	fake.addProductFileMutex.RLock()
	defer fake.addProductFileMutex.RUnlock()
	return fake.addProductFileArgsForCall[i].productID, fake.addProductFileArgsForCall[i].releaseID, fake.addProductFileArgsForCall[i].productFileID
}

func (fake *FakeClient) AddProductFileReturns(result1 error) {
	fake.AddProductFileStub = nil
	fake.addProductFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) FindProductForSlug(slug string) (pivnet.Product, error) {
	fake.findProductForSlugMutex.Lock()
	fake.findProductForSlugArgsForCall = append(fake.findProductForSlugArgsForCall, struct {
		slug string
	}{slug})
	fake.findProductForSlugMutex.Unlock()
	if fake.FindProductForSlugStub != nil {
		return fake.FindProductForSlugStub(slug)
	} else {
		return fake.findProductForSlugReturns.result1, fake.findProductForSlugReturns.result2
	}
}

func (fake *FakeClient) FindProductForSlugCallCount() int {
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return len(fake.findProductForSlugArgsForCall)
}

func (fake *FakeClient) FindProductForSlugArgsForCall(i int) string {
	fake.findProductForSlugMutex.RLock()
	defer fake.findProductForSlugMutex.RUnlock()
	return fake.findProductForSlugArgsForCall[i].slug
}

func (fake *FakeClient) FindProductForSlugReturns(result1 pivnet.Product, result2 error) {
	fake.FindProductForSlugStub = nil
	fake.findProductForSlugReturns = struct {
		result1 pivnet.Product
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UserGroups(productSlug string, releaseID int) ([]pivnet.UserGroup, error) {
	fake.userGroupsMutex.Lock()
	fake.userGroupsArgsForCall = append(fake.userGroupsArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.userGroupsMutex.Unlock()
	if fake.UserGroupsStub != nil {
		return fake.UserGroupsStub(productSlug, releaseID)
	} else {
		return fake.userGroupsReturns.result1, fake.userGroupsReturns.result2
	}
}

func (fake *FakeClient) UserGroupsCallCount() int {
	fake.userGroupsMutex.RLock()
	defer fake.userGroupsMutex.RUnlock()
	return len(fake.userGroupsArgsForCall)
}

func (fake *FakeClient) UserGroupsArgsForCall(i int) (string, int) {
	fake.userGroupsMutex.RLock()
	defer fake.userGroupsMutex.RUnlock()
	return fake.userGroupsArgsForCall[i].productSlug, fake.userGroupsArgsForCall[i].releaseID
}

func (fake *FakeClient) UserGroupsReturns(result1 []pivnet.UserGroup, result2 error) {
	fake.UserGroupsStub = nil
	fake.userGroupsReturns = struct {
		result1 []pivnet.UserGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) AddUserGroup(productSlug string, releaseID int, userGroupID int) error {
	fake.addUserGroupMutex.Lock()
	fake.addUserGroupArgsForCall = append(fake.addUserGroupArgsForCall, struct {
		productSlug string
		releaseID   int
		userGroupID int
	}{productSlug, releaseID, userGroupID})
	fake.addUserGroupMutex.Unlock()
	if fake.AddUserGroupStub != nil {
		return fake.AddUserGroupStub(productSlug, releaseID, userGroupID)
	} else {
		return fake.addUserGroupReturns.result1
	}
}

func (fake *FakeClient) AddUserGroupCallCount() int {
	fake.addUserGroupMutex.RLock()
	defer fake.addUserGroupMutex.RUnlock()
	return len(fake.addUserGroupArgsForCall)
}

func (fake *FakeClient) AddUserGroupArgsForCall(i int) (string, int, int) {
	fake.addUserGroupMutex.RLock()
	defer fake.addUserGroupMutex.RUnlock()
	return fake.addUserGroupArgsForCall[i].productSlug, fake.addUserGroupArgsForCall[i].releaseID, fake.addUserGroupArgsForCall[i].userGroupID
}

func (fake *FakeClient) AddUserGroupReturns(result1 error) {
	fake.AddUserGroupStub = nil
	fake.addUserGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) ReleaseETag(arg1 string, arg2 pivnet.Release) (string, error) {
	fake.releaseETagMutex.Lock()
	fake.releaseETagArgsForCall = append(fake.releaseETagArgsForCall, struct {
		arg1 string
		arg2 pivnet.Release
	}{arg1, arg2})
	fake.releaseETagMutex.Unlock()
	if fake.ReleaseETagStub != nil {
		return fake.ReleaseETagStub(arg1, arg2)
	} else {
		return fake.releaseETagReturns.result1, fake.releaseETagReturns.result2
	}
}

func (fake *FakeClient) ReleaseETagCallCount() int {
	fake.releaseETagMutex.RLock()
	defer fake.releaseETagMutex.RUnlock()
	return len(fake.releaseETagArgsForCall)
}

func (fake *FakeClient) ReleaseETagArgsForCall(i int) (string, pivnet.Release) {
	fake.releaseETagMutex.RLock()
	defer fake.releaseETagMutex.RUnlock()
	return fake.releaseETagArgsForCall[i].arg1, fake.releaseETagArgsForCall[i].arg2
}

func (fake *FakeClient) ReleaseETagReturns(result1 string, result2 error) {
	fake.ReleaseETagStub = nil
	fake.releaseETagReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ReleaseTypes() ([]string, error) {
	fake.releaseTypesMutex.Lock()
	fake.releaseTypesArgsForCall = append(fake.releaseTypesArgsForCall, struct{}{})
	fake.releaseTypesMutex.Unlock()
	if fake.ReleaseTypesStub != nil {
		return fake.ReleaseTypesStub()
	} else {
		return fake.releaseTypesReturns.result1, fake.releaseTypesReturns.result2
	}
}

func (fake *FakeClient) ReleaseTypesCallCount() int {
	fake.releaseTypesMutex.RLock()
	defer fake.releaseTypesMutex.RUnlock()
	return len(fake.releaseTypesArgsForCall)
}

func (fake *FakeClient) ReleaseTypesReturns(result1 []string, result2 error) {
	fake.ReleaseTypesStub = nil
	fake.releaseTypesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ReleaseDependencies(productSlug string, releaseID int) ([]pivnet.ReleaseDependency, error) {
	fake.releaseDependenciesMutex.Lock()
	fake.releaseDependenciesArgsForCall = append(fake.releaseDependenciesArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.releaseDependenciesMutex.Unlock()
	if fake.ReleaseDependenciesStub != nil {
		return fake.ReleaseDependenciesStub(productSlug, releaseID)
	} else {
		return fake.releaseDependenciesReturns.result1, fake.releaseDependenciesReturns.result2
	}
}

func (fake *FakeClient) ReleaseDependenciesCallCount() int {
	fake.releaseDependenciesMutex.RLock()
	defer fake.releaseDependenciesMutex.RUnlock()
	return len(fake.releaseDependenciesArgsForCall)
}

func (fake *FakeClient) ReleaseDependenciesArgsForCall(i int) (string, int) {
	fake.releaseDependenciesMutex.RLock()
	defer fake.releaseDependenciesMutex.RUnlock()
	return fake.releaseDependenciesArgsForCall[i].productSlug, fake.releaseDependenciesArgsForCall[i].releaseID
}

func (fake *FakeClient) ReleaseDependenciesReturns(result1 []pivnet.ReleaseDependency, result2 error) {
	fake.ReleaseDependenciesStub = nil
	fake.releaseDependenciesReturns = struct {
		result1 []pivnet.ReleaseDependency
		result2 error
	}{result1, result2}
}

var _ pivnet.Client = new(FakeClient)
